{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "tsc --build"
        },
        {
          "spawn": "compile:cjs"
        }
      ]
    },
    "compile:cjs": {
      "name": "compile:cjs",
      "steps": [
        {
          "name": "compile",
          "exec": "tsc --outDir lib-cjs -p tsconfig.cjs.json"
        },
        {
          "name": "move",
          "exec": "node scripts/lib-cjs.js"
        },
        {
          "name": "cleanup",
          "exec": "rm -rf lib-cjs"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files"
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx ${CI:-'--fix'} --no-error-on-unmatched-pattern src test",
          "receiveArgs": true
        }
      ]
    },
    "eslint-staged": {
      "name": "eslint-staged",
      "description": "Run eslint against the staged files only",
      "steps": [
        {
          "exec": "eslint --fix --no-error-on-unmatched-pattern $(git diff --name-only --relative --staged HEAD . | grep -E '^(.*/)?(src|test)/.*.(ts|tsx)$' | xargs)"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "pnpm i --no-frozen-lockfile"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "pnpm i --frozen-lockfile"
        }
      ]
    },
    "jest": {
      "name": "jest",
      "steps": [
        {
          "exec": "jest --passWithNoTests ${CI:-'--updateSnapshot'} ${NX_WORKSPACE_ROOT:+'--runInBand'}",
          "receiveArgs": true
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "mkdir -p dist/js"
        },
        {
          "exec": "mv $(npm pack) dist/js/"
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation"
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "spawn": "jest"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "pnpm update npm-check-updates"
        },
        {
          "exec": "npm-check-updates --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@aws-sdk/protocol-http,@aws-sdk/querystring-parser,@aws-sdk/signature-v4,@types/jest,@types/lodash,@types/node,@types/uuid,@typescript-eslint/eslint-plugin,@typescript-eslint/parser,aws-sdk-client-mock,eslint-import-resolver-node,eslint-import-resolver-typescript,eslint-plugin-header,eslint-plugin-import,eslint,jest,jest-junit,npm-check-updates,projen,ts-jest,typescript,@aws-sdk/client-dynamodb,@aws-sdk/client-s3,@aws-sdk/client-sagemaker-runtime,@aws-sdk/client-secrets-manager,@aws-sdk/client-service-quotas,@aws-sdk/credential-providers,@aws-sdk/lib-dynamodb,@aws-sdk/rds-signer,@aws-sdk/types,@aws-crypto/sha256-js,@aws-lambda-powertools/logger,@aws-lambda-powertools/metrics,@aws-lambda-powertools/parameters,cross-fetch,handlebars,handlebars-helpers-lite,lodash,pg-promise,safe-handlebars,uuid"
        },
        {
          "exec": "pnpm i --no-frozen-lockfile"
        },
        {
          "exec": "pnpm update @aws-sdk/protocol-http @aws-sdk/querystring-parser @aws-sdk/signature-v4 @types/jest @types/lodash @types/node @types/uuid @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-sdk-client-mock eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-header eslint-plugin-import eslint jest jest-junit npm-check-updates projen ts-jest typescript @aws-sdk/client-dynamodb @aws-sdk/client-s3 @aws-sdk/client-sagemaker-runtime @aws-sdk/client-secrets-manager @aws-sdk/client-service-quotas @aws-sdk/credential-providers @aws-sdk/lib-dynamodb @aws-sdk/rds-signer @aws-sdk/types @aws-crypto/sha256-js @aws-lambda-powertools/logger @aws-lambda-powertools/metrics @aws-lambda-powertools/parameters cross-fetch handlebars handlebars-helpers-lite lodash pg-promise safe-handlebars uuid"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "tsc --build -w"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(pnpm -c exec \"node --print process.env.PATH\")",
    "NODE_NO_WARNINGS": "1"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
