{
  "tasks": {
    "bootstrap-account": {
      "name": "bootstrap-account",
      "description": "Bootstrap aws account with CDK",
      "steps": [
        {
          "exec": "pnpm dlx cdk bootstrap --profile ${AWS_PROFILE} aws://$(aws sts get-caller-identity --query Account --output text)/$(aws configure get region) --cloudformation-execution-policies arn:aws:iam::aws:policy/PowerUserAccess --cloudformation-execution-policies arn:aws:iam::aws:policy/IAMFullAccess",
          "receiveArgs": true
        }
      ]
    },
    "build": {
      "name": "build",
      "description": "Full release build for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=build --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "deploy:app": {
      "name": "deploy:app",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=deploy:app --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "deploy:pipeline": {
      "name": "deploy:pipeline",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=deploy:pipeline --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "docs:build": {
      "name": "docs:build",
      "steps": [
        {
          "exec": "docs/scripts/build.sh"
        }
      ]
    },
    "docs:serve": {
      "name": "docs:serve",
      "steps": [
        {
          "exec": "docs/scripts/serve.sh"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase for all affected projects",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx ${CI:-'--fix'} --no-error-on-unmatched-pattern ."
        },
        {
          "exec": "pnpm exec nx run-many --target=eslint --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "eslint-staged": {
      "name": "eslint-staged",
      "description": "Run eslint against the staged files only",
      "steps": [
        {
          "exec": "eslint --fix --no-error-on-unmatched-pattern $(git diff --name-only --relative --staged HEAD . | grep -E '^(.*/)?(projenrc|bin|scripts)/.*.(ts|tsx)$' | xargs)"
        }
      ]
    },
    "git-secrets-scan": {
      "name": "git-secrets-scan",
      "steps": [
        {
          "exec": "./scripts/git-secrets-scan.sh"
        }
      ]
    },
    "graph": {
      "name": "graph",
      "description": "Generate dependency graph for monorepo",
      "steps": [
        {
          "exec": "pnpm exec nx graph",
          "receiveArgs": true
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "pnpm i --no-frozen-lockfile"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "pnpm i --frozen-lockfile"
        }
      ]
    },
    "oss": {
      "name": "oss",
      "steps": [
        {
          "exec": "pnpm dlx tsx ./scripts/oss.ts"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=package --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=post-compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "postinstall": {
      "name": "postinstall",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=install --output-style=stream --parallel=1 --nx-bail --projects=api-python-runtime,corpus"
        }
      ]
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=pre-compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "prepare": {
      "name": "prepare",
      "steps": [
        {
          "exec": "husky install"
        },
        {
          "spawn": "workspace:bin:link"
        }
      ]
    },
    "release:mainline": {
      "name": "release:mainline",
      "description": "Prepare a release from \"mainline\" branch",
      "env": {
        "RELEASE": "true"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    },
    "run-many": {
      "name": "run-many",
      "description": "Run task against multiple workspace projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many",
          "receiveArgs": true
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=test --output-style=stream --nx-bail",
          "receiveArgs": true
        },
        {
          "spawn": "git-secrets-scan"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "pnpm update npm-check-updates"
        },
        {
          "exec": "npm-check-updates --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@aws/pdk,@commitlint/cli,@commitlint/config-conventional,@nrwl/devkit,@types/clear,@types/figlet,@types/lodash,@types/node-localstorage,@types/node,@types/prompts,@types/spdx-correct,@types/spdx-satisfies,@typescript-eslint/eslint-plugin,@typescript-eslint/parser,chalk,clear,commander,commitizen,cz-conventional-changelog,esbuild,eslint-config-prettier,eslint-import-resolver-node,eslint-import-resolver-typescript,eslint-plugin-header,eslint-plugin-import,eslint-plugin-prettier,eslint,esprima,execa,figlet,got,husky,lodash,node-localstorage,npm-check-updates,prettier,projen,prompts,spdx-correct,spdx-satisfies,standard-version,syncpack,ts-node,tsx,typescript,nx,aws-cdk-lib,cdk-nag,constructs"
        },
        {
          "exec": "pnpm i --no-frozen-lockfile"
        },
        {
          "exec": "pnpm update @aws/pdk @commitlint/cli @commitlint/config-conventional @nrwl/devkit @types/clear @types/figlet @types/lodash @types/node-localstorage @types/node @types/prompts @types/spdx-correct @types/spdx-satisfies @typescript-eslint/eslint-plugin @typescript-eslint/parser chalk clear commander commitizen cz-conventional-changelog esbuild eslint-config-prettier eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-header eslint-plugin-import eslint-plugin-prettier eslint esprima execa figlet got husky lodash node-localstorage npm-check-updates prettier projen prompts spdx-correct spdx-satisfies standard-version syncpack ts-node tsx typescript nx aws-cdk-lib cdk-nag constructs"
        },
        {
          "exec": "pnpm exec projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "upgrade-deps": {
      "name": "upgrade-deps",
      "steps": [
        {
          "exec": "pnpm exec npm-check-updates --deep --rejectVersion 0.0.0 -u --dep prod,dev,peer,optional,bundle --target=minor"
        },
        {
          "exec": "pnpm exec syncpack fix-mismatches"
        },
        {
          "exec": "pnpm i"
        },
        {
          "exec": "pnpm exec projen"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "workspace:bin:link": {
      "name": "workspace:bin:link",
      "steps": [
        {
          "exec": "ln -s $PWD/packages/galileo-cli/bin/.cache $(pnpm bin)/.cache &>/dev/null; exit 0;"
        },
        {
          "exec": "ln -s $PWD/packages/galileo-cli/bin/galileo-cli.ts $(pnpm bin)/galileo-cli-experimental &>/dev/null; exit 0;"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(pnpm -c exec \"node --print process.env.PATH\")",
    "NODE_NO_WARNINGS": "1"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
