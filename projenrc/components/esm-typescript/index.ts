import fs from "node:fs";
import path from "node:path";
import { merge } from "lodash";
import { Stability } from "projen/lib/cdk";
import {
  PROJECT_AUTHOR,
  DEFAULT_RELEASE_BRANCH,
} from "../../constants";
import { TypeScriptProject, TypeScriptProjectOptions, mergeTsconfigOptions } from "projen/lib/typescript";
import { NodePackageManager, TypeScriptModuleResolution } from "projen/lib/javascript";
import { JsonFile, TextFile } from 'projen';
import { EsmPackageExports } from './pkg-exports';

export class EsmTypescriptProject extends TypeScriptProject {
  constructor(options: Omit<TypeScriptProjectOptions, keyof typeof PROJECT_AUTHOR | "defaultReleaseBranch">) {
    super({
      ...PROJECT_AUTHOR,
      defaultReleaseBranch: DEFAULT_RELEASE_BRANCH,
      stability: Stability.EXPERIMENTAL,
      publishDryRun: true,
      packageManager: (options.parent?.root as TypeScriptProject)?.package?.packageManager ?? NodePackageManager.PNPM,
      ...options,
      tsconfigDev: mergeTsconfigOptions({
        compilerOptions: {
          noUnusedLocals: false,
          noUnusedParameters: false,
        },
        exclude: []
      }, options.tsconfigDev),
      tsconfig: mergeTsconfigOptions({
        compilerOptions: {
          lib: ["DOM", "ES2021", "ES2022.Object"],
          moduleResolution: TypeScriptModuleResolution.NODE_NEXT,
          module: TypeScriptModuleResolution.NODE_NEXT,
        },
        exclude: [
          "**/*.spec.*",
          "**/*.test.*",
        ]
      }, options.tsconfig),
    })

    // @ts-ignore - read-only
    this.tsconfigDev.exclude = this.tsconfigDev.exclude.filter(v => ![
      "**/*.spec.*",
      "**/*.test.*",
    ].includes(v))

    // https://kulshekhar.github.io/ts-jest/docs/next/guides/esm-support/
    merge(this.jest?.config, {
      extensionsToTreatAsEsm: [".ts"],
      moduleNameMapper: {
        "^(\\.{1,2}/.*)\\.js$": "$1",
      },
      globals: {
        "ts-jest": {
          useESM: true,
        }
      }

    });

    this.package.addField("type", "module");
    this.package.addField("private", true);

    this.package.addPackageResolutions("jsii-rosetta@5.x");

    const libCjsOutdir = "lib-cjs";
    this.gitignore.exclude(libCjsOutdir);

    const tsconfigCsj = new JsonFile(this, "tsconfig.cjs.json", {
      allowComments: true,
      obj: {
        extends: "./tsconfig.json",
        compilerOptions: {
          module: "commonjs",
          moduleResolution: TypeScriptModuleResolution.NODE,
          declaration: false,
        },
      }
    });

    const libCsjScript = new TextFile(this, "scripts/lib-cjs.js", {
      marker: false,
      readonly: true,
      lines: [
        `// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".`,
        fs.readFileSync(path.join(__dirname, "scripts", "lib-cjs.js"), { encoding: "utf-8" }),
      ],
    });

    const compileCjsTask = this.addTask("compile:cjs", {
      steps: [
        { name: "compile", exec: `tsc --outDir ${libCjsOutdir} -p ${tsconfigCsj.path}` },
        { name: "move", exec: `node ${libCsjScript.path}` },
        { name: "cleanup", exec: `rm -rf ${libCjsOutdir}` },
      ]
    });

    this.compileTask.spawn(compileCjsTask);

    new EsmPackageExports(this);
  }
}
