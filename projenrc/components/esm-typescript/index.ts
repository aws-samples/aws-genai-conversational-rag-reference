/*! Copyright [Amazon.com](http://amazon.com/), Inc. or its affiliates. All Rights Reserved.
PDX-License-Identifier: Apache-2.0 */
import fs from "node:fs";
import path from "node:path";
import { merge, set } from "lodash";
import { JsonFile, TextFile } from "projen";
import { Stability } from "projen/lib/cdk";
import {
  NodePackageManager,
  TypeScriptModuleResolution,
} from "projen/lib/javascript";
import {
  TypeScriptProject,
  TypeScriptProjectOptions,
  mergeTsconfigOptions,
} from "projen/lib/typescript";
import { EsmPackageExports } from "./pkg-exports";
import { PROJECT_AUTHOR, DEFAULT_RELEASE_BRANCH } from "../../constants";

export interface EsmTypescriptProjectOptions
  extends Omit<
    TypeScriptProjectOptions,
    keyof typeof PROJECT_AUTHOR | "defaultReleaseBranch"
  > {
  /**
   * Indicates if package is private, which will be denoted in the package.json.
   * @default true
   */
  readonly private?: boolean;
  /**
   * List of package dependencies that need to be transformed.
   * Currently just applies to jest https://jestjs.io/docs/configuration#transformignorepatterns-arraystring
   */
  readonly depsToTransform?: string[];
  /**
   * Indicates if module is automatically exported
   * @default true
   */
  readonly rootExport?: boolean;
}

export class EsmTypescriptProject extends TypeScriptProject {
  constructor(options: EsmTypescriptProjectOptions) {
    super({
      ...PROJECT_AUTHOR,
      defaultReleaseBranch: DEFAULT_RELEASE_BRANCH,
      stability: Stability.EXPERIMENTAL,
      publishDryRun: true,
      packageManager:
        (options.parent?.root as TypeScriptProject)?.package?.packageManager ??
        NodePackageManager.PNPM,
      ...options,
      tsconfigDev: mergeTsconfigOptions(
        {
          compilerOptions: {
            noUnusedLocals: false,
            noUnusedParameters: false,
            allowJs: true,
          },
          exclude: [],
        },
        options.tsconfigDev
      ),
      tsconfig: mergeTsconfigOptions(
        {
          compilerOptions: {
            lib: ["DOM", "ES2021"],
            target: "ES2021",
            moduleResolution: TypeScriptModuleResolution.NODE_NEXT,
            module: TypeScriptModuleResolution.NODE_NEXT,
          },
          exclude: ["**/*.spec.*", "**/*.test.*"],
        },
        options.tsconfig
      ),
    });

    // @ts-ignore - read-only
    this.tsconfigDev.exclude = this.tsconfigDev.exclude.filter(
      (v) => !["**/*.spec.*", "**/*.test.*"].includes(v)
    );

    if (this.jest) {
      // https://kulshekhar.github.io/ts-jest/docs/next/guides/esm-support/
      merge(this.jest.config, {
        preset: "ts-jest/presets/js-with-ts-esm",
        moduleNameMapper: {
          "^(\\.{1,2}/.*)\\.js$": "$1",
        },
      });

      if (options.depsToTransform) {
        set(
          this.jest.config,
          "transformIgnorePatterns",
          options.depsToTransform.map((v) => {
            return `node_modules\\/(?!\\.pnpm|${v})`;
          })
        );
      }
    }

    this.package.addField("type", "module");

    options.private !== false && this.package.addField("private", true);

    this.package.addPackageResolutions("jsii-rosetta@5.x");

    const libCjsOutdir = "lib-cjs";
    this.gitignore.exclude(libCjsOutdir);

    const tsconfigCsj = new JsonFile(this, "tsconfig.cjs.json", {
      allowComments: true,
      obj: {
        extends: "./tsconfig.json",
        compilerOptions: {
          module: "commonjs",
          moduleResolution: TypeScriptModuleResolution.NODE,
          declaration: false,
        },
      },
    });

    const libCsjScript = new TextFile(this, "scripts/lib-cjs.js", {
      marker: false,
      readonly: true,
      lines: [
        `// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".`,
        fs.readFileSync(path.join(__dirname, "scripts", "lib-cjs.js"), {
          encoding: "utf-8",
        }),
      ],
    });

    const compileCjsTask = this.addTask("compile:cjs", {
      steps: [
        {
          name: "compile",
          exec: `tsc --outDir ${libCjsOutdir} -p ${tsconfigCsj.path}`,
        },
        { name: "move", exec: `node ${libCsjScript.path}` },
        { name: "cleanup", exec: `rm -rf ${libCjsOutdir}` },
      ],
    });

    this.compileTask.spawn(compileCjsTask);

    new EsmPackageExports(this, {
      src: this.srcdir,
      lib: this.libdir,
      rootExport: options.rootExport,
    });
  }
}
